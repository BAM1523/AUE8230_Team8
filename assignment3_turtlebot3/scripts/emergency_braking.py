#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan

class EmergencyBraking():
    def __init__(self):
        # Starts a new node
        rospy.init_node('emergency_braking', anonymous=True)
        self.scan_distance = float('inf') 
        self.velocity_publisher = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        self.scan_subscriber = rospy.Subscriber('/scan', LaserScan, self.scan_callback)
        self.min_distance = 1.0
        self.vel_msg = Twist()
        self.r = rospy.Rate(10)
        
    def emergency_braking(self):
        self.vel_msg.linear.x = 0.5

        print(self.scan_distance)
        print(self.min_distance)
        while not rospy.is_shutdown():
            if self.scan_distance < self.min_distance:
                self.emergency_brake()
            #print(self.vel_msg)
            self.velocity_publisher.publish(self.vel_msg)
        
    def emergency_brake(self):
        self.vel_msg.linear.x = 0.0
        self.vel_msg.linear.y = 0
        self.vel_msg.linear.z = 0
        self.vel_msg.angular.x = 0
        self.vel_msg.angular.y = 0
        self.vel_msg.angular.z = 0.0


    def scan_callback(self, msg):
        # lidar angle is from 0 to 2*pi so the center value
        self.scan_distance = msg.ranges[0]
        #self.scan_distance = self.findMiddle(msg.ranges)[0]
        print(self.scan_distance)

    def findMiddle(self, input_list):
        middle = float(len(input_list))/2
        if middle % 2 != 0:
            return input_list[int(middle - .5)]
        else:
            return (input_list[int(middle)], input_list[int(middle-1)])

if __name__ == '__main__':
    try:
        emergency_braking = EmergencyBraking()
        emergency_braking.emergency_braking()
    except rospy.ROSInterruptException: pass

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































